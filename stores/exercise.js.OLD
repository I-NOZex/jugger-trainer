import { useFirestore } from '@vueuse/firebase/useFirestore';
import { useAuth } from '@vueuse/firebase/useAuth';
import {
    collection,
    getDocs,
    limit,
    orderBy,
    query,
    startAfter,
    startAt,
    onSnapshot
} from 'firebase/firestore';

const postsLimit = 9;

export const useExerciseStore = defineStore('exercise', () => {
    const exercises = ref([]);
    const loading = ref(false);
    const firstPageId = ref(null);
    const filters = ref({
        playersMin: null,
        exertionLevel: null
    });

    const getExercises = computed((state) => state.exercises);
    const lastExerciseFromPage = computed(
        (state) =>
            state.exercises && state.exercises[state.exercises.length - 1]
    );
    const firstExerciseFromPage = computed(
        (state) => state.exercises && state.exercises[0]
    );
    const getHasPreviousPage = computed(
        (state) => state.firstExerciseFromPage?.eid !== state.firstPageId
    );

    const fetchData = async (query) => {
        this.loading = true;

        const docsSnap = await getDocs(query);
        const docs = [];
        docsSnap.forEach((doc) => {
            docs.push(doc.data());
        });

        this.loading = false;
        return docs;
    };

    const fetch = async () => {
        const nuxtApp = useNuxtApp();

        const filters = [where('playersMin', '>=', 0)];

        const postsQuery = query(
            collection(nuxtApp.$firestore, 'exercises'),
            ...filters,
            orderBy('playersMin', 'asc'),
            orderBy('created', 'desc'),
            limit(postsLimit)
        );
        this.$patch({ exercises: await this.fetchData(postsQuery) });
        this.firstPageId = this.exercises[0].eid;
    };

    const fetchPreviousPage = async () => {
        if (!this.getHasPreviousPage) return;
        const nuxtApp = useNuxtApp();
        const postsQuery = query(
            collection(nuxtApp.$firestore, 'exercises'),
            orderBy('created', 'desc'),
            endAt(this.firstExerciseFromPage.created),
            limitToLast(postsLimit)
        );

        this.$patch({ exercises: await this.fetchData(postsQuery) });
    };

    const fetchNextPage = async () => {
        const nuxtApp = useNuxtApp();
        const postsQuery = query(
            collection(nuxtApp.$firestore, 'exercises'),
            orderBy('created', 'desc'),
            startAt(this.lastExerciseFromPage.created),
            limit(postsLimit)
        );

        this.$patch({ exercises: await this.fetchData(postsQuery) });
    };

    const mapTagNames = (tagIds) => {
        const tagStore = useTagStore();

        return tagIds?.map((id) => {
            const tag = tagStore.getTags.find((tag) => tag.tagID === id);
            return tag ? tag.tag : null;
        });
    };
});
